#
# MachineGun X VR motion script
#
# component = input, output, mixer, module
#
# device = udp, tcp, serial, shm (shared memory)
# 	- udp
#		- ip = 127.0.0.1
#		- port = 8888
#		- startindex = 1
#		- input : bindport = 8888
#	- tcp
#		- ip = 127.0.0.1
#		- port = 8888
#		- input : bindport = 8888
#	- serial
#		- portnum = 1
#		- baudrate = 115200
#	- shm
#		- shmname = name
#		- startindex = 1001
#
#
# module
#	- inputvalue = $1
#	- outputvalue = $2
#
#
# mixer
#	- default input value
#		- @roll, @pitch, @yaw, @heave
#	- default output value
#		- @roll_mod, @pitch_mod, @yaw_mod, @heave_mod
#
#
# output
#	- outputlog = serialoutput.txt
#
#
#
# funcitons
#	- atan(y, x)
#	- clamp(value, min, max)
#	- scale(value, center, rate)
#
#
# global variable
#	- sharedmemory_name = motionmem
#	- log = 0
#
#
# motion variable
#	- @roll, @pitch, @yaw, @heave
#	- @roll_mod, @pitch_mod, @yaw_mod, @heave_mod
#	- @roll_fin, @pitch_fin, @yaw_fin, @heave_fin
#	- @motion_speed
#	- @yaw_speed
#

sharedmemory_name = motionmem
log = 0


:input
{
	device = udp
	bindport = 20590
	startindex = 0

	:protocol
	{
		1, int # $1, header $
		1, int # $2, comma1 
		1, int # $3, deviceNumber 9
		1, int # $4, zero1 0
		1, int # $5, comma2 

		1, int # $6, player1 fire 0/1
		1, int # $7, player1 fire event 0/1
		1, int # $8, player1 reload 0/1
		1, int # $9, player1 start 0/1
		1, int # $10, player1 up motor 0/1
		1, int # $11, player1 down motor 0/1
		1, int # $12, player1 up sensor 0/1
		1, int # $13, player1 down motor 0/1
		1, int # $14, player1 emergency switch 0/1
		1, int # $15, coin
		1, int # $16, space1


		1, int # $17, player2 fire 0/1
		1, int # $18, player2 fire event 0/1
		1, int # $19, player2 reload 0/1
		1, int # $20, player2 start 0/1
		1, int # $21, player2 up motor 0/1
		1, int # $22, player2 down motor 0/1
		1, int # $23, player2 up sensor 0/1
		1, int # $24, player2 down motor 0/1
		1, int # $25, player2 emergency switch 0/1
		1, int # $26, space2
		1, int # $27, space3

		1, int # $28, comma
		1, int # $29, at

		1, int # $30, 0x0d
		1, int # $31, 0x0a
	}


	:math
	{
		$var4 = $var4 + 1


	}


	:modulation
	{
		# udp input

		yaw_kp = 1
		yaw_ki = 0.0
		yaw_kd = 0

		pitch_kp = 1
		pitch_ki = 0.0
		pitch_kd = 0

		roll_kp = 1
		roll_ki = 0.0
		roll_kd = 0

		heave_kp = 1
		heave_ki = 0
		heave_kd = 0


		yaw_recover_enable = 0
		yaw_max_difference_enable = 0
		yaw_recover_target = 0
		yaw_recover_proportion = 0.02
		yaw_max_difference = 0.5
		yaw_max_difference_proportion = 0.2
		yaw_range = 6.283


		pitch_recover_enable = 0
		pitch_max_difference_enable = 0
		pitch_recover_target = 0
		pitch_recover_proportion = 0.02
		pitch_max_difference = 3.1415
		pitch_max_difference_proportion = 0.2
		pitch_range = 6.283


		roll_recover_enable = 0
		roll_max_difference_enable = 0
		roll_recover_target = 0
		roll_recover_proportion = 0.02
		roll_max_difference = 3.1415
		roll_max_difference_proportion = 0.2
		roll_range = 6.283


		heave_recover_enable = 0
		heave_max_difference_enable = 0
		heave_recover_target = 0
		heave_recover_proportion = 0.1
		heave_max_difference = 100000
		heave_max_difference_proportion = 0.2
		heave_range = 1000000
		heave_range_enable = 0
		heave_range_max = 18.5
		heave_range_min = -18.5
		heave_use_x0_calcvalue = 0


		spline_enable = 0

		yaw_c1 = 0
		yaw_c2 = 1
		yaw_c3 = 0

		pitch_c1 = 0
		pitch_c2 = 1
		pitch_c3 = 0

		roll_c1 = 0
		roll_c2 = 1
		roll_c3 = 0

		heave_c1 = 0
		heave_c2 = 1
		heave_c3 = 0
	}
}



:module
{
	inputvalue = $1008
	outputvalue = $surge

	:modulation
	{
		# surge speed modulation

		kp = 0.0
		ki = 0.0
		kd = 0.1
		recover_enable = 1
		max_difference_enable = 0startIndex
		recover_target = 0
		recover_proportion = 0.2
		max_difference = 1000
		max_difference_proportion = 0.2
		range = 6.283
		use_x0_calcvalue = 1

		c1 = 0
		c2 = 20000
		c3 = 0
	}

}



:module
{
	inputvalue = $1006
	outputvalue = $sway

	:modulation
	{
		# sway speed modulation

		kp = 0.0
		ki = 0.0
		kd = 0.1
		recover_enable = 1
		max_difference_enable = 0
		recover_target = 0
		recover_proportion = 0.2
		max_difference = 1000
		max_difference_proportion = 0.2
		range = 6.283
		use_x0_calcvalue = 1

		c1 = 0
		c2 = -20000
		c3 = 0
	}

}



:mixer
{
	:init
	{
		@motion_speed = 1
		@yaw_speed = 0
	}

	:math
	{
		@roll_fin = clamp( scale( @roll_mod + $sway, 10000, @motion_speed), 0, 20000 )
		@pitch_fin = clamp( scale( @pitch_mod + $surge, 10000, @motion_speed), 0, 20000 )
		@yaw_fin = clamp( scale( (@yaw_mod * @yaw_speed) + 10000, 10000, @motion_speed), 0, 20000 )
		@heave_fin = clamp( scale( @heave_mod, 10000, @motion_speed), 0, 20000 )

		@shoot_fin = clamp( @shoot * @gamestate * 100, 0, 100)

		@roll_fin2 = ((20000 - @roll_fin) - 10000) / 10000
		@pitch_fin2 = (@pitch_fin - 10000) / 10000
		@yaw_fin2 = (@yaw_fin - 10000) / 10000
		@heave_fin2 = (@heave_fin - 10000) / 10000

	}
}


:output
{
	device = serial
	portnum = 1
	baudrate = 115200


	:format
	{
		A
		@roll_fin, %5d
		@pitch_fin, %5d
		@yaw_fin, %5d
		"00000"
		"00000"
		@heave_fin, %5d
		"000"
		"000"
		"000"
		"000"
		@shoot_fin, %3d
		"000"
		"0"
		Z
	}


	:format
	{
		A1000010000100001000010000100000000000000000000007Z
	}

	:format
	{
		A1000010000100001000010000100000000000000000000008Z
	}

	:format
	{
		A1000010000100001000010000100000000000000000000001Z
	}

	:format
	{
		A1000010000100001000010000100000000000000000000002Z
	}		


}



